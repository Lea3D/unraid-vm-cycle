Menu="Utilities"
Icon="vm-cycle.png"
Title="vm-cycle"
---
<?php
require_once "/usr/local/emhttp/plugins/dynamix.vm.manager/include/libvirt_helpers.php";

$vmcyclevmsetup = parse_ini_file("/boot/config/plugins/vm-cycle/vmcyclesettings", true);
$lv = new Libvirt('qemu:///system');
$vms = $lv->get_domains();
$gpuList = getValidGPUDevices();

$vmcyclevmsetup_vm1 = $vmcyclevmsetup['VM1'] ?? "";
$vmcyclevmsetup_vm2 = $vmcyclevmsetup['VM2'] ?? "";
$vmcyclevmsetup_vmdocker = $vmcyclevmsetup['VMD'] ?? "";
$vmcyclevmsetup_docker = $vmcyclevmsetup['DOCKERS'] ?? "";

function getIcon($res, $uuid) {
  global $lv;
  $icon = $lv->domain_get_icon_url($res);
  if (!$icon || !file_exists("/usr/local/emhttp/" . ltrim($icon, '/'))) {
    $icon = "/plugins/dynamix.vm.manager/templates/images/question.png";
  }
  return $icon;
}

function extractPciGroupedDevices($config, $gpuList) {
  $gpuSet = array_column($gpuList, 'id');
  $gpuEntries = [];
  $pciEntries = [];

  foreach (($config['gpu'] ?? []) as $gpu) {
    $bus = $gpu['id'] ?? ($gpu['bus'] ?? 'unknown');
    $name = '';
    foreach ($gpuList as $known) {
      if ($known['id'] === $bus) {
        $name = $known['name'];
        break;
      }
    }
    if (!$name) {
      $name = trim(shell_exec("lspci -s " . escapeshellarg($bus) . " | cut -d' ' -f5-"));
    }
    $gpuEntries[] = "$bus<br><small>$name</small>";
  }

  foreach (($config['pci'] ?? []) as $pci) {
    if (!in_array($pci['id'], $gpuSet)) {
      $bus = $pci['id'] ?? ($pci['bus'] ?? 'unknown');
      $name = trim(shell_exec("lspci -s " . escapeshellarg($bus) . " | cut -d' ' -f5-"));
      $pciEntries[] = "$bus<br><small>$name</small>";
    }
  }

  return [implode("<br><br>", $gpuEntries), implode("<br><br>", $pciEntries)];
}

function extractGroupedDevices($config, $type) {
  $result = [];
  foreach ($config[$type] ?? [] as $entry) {
    $addr = $entry['id'] ?? ($entry['bus'] ?? 'unknown');
    $name = $entry['name'] ?? '';
    if (!$name) {
      $lsusbOutput = shell_exec("lsusb | grep ".escapeshellarg(str_replace(':', '', $addr)));
      $name = trim(preg_replace('/.*ID [^ ]+ (.*)/', '$1', $lsusbOutput));
    }
    $result[] = "$addr<br><small>$name</small>";
  }
  return implode("<br><br>", $result);
}
?>

<div style="display: flex; justify-content: center;">
  <table class="tablesorter" style="width: 100%; max-width: 1600px; margin: 0 auto; table-layout: auto;">
    <thead>
      <tr>
        <th>Status</th>
        <th>Icon</th>
        <th>VM Name</th>
        <th>GPUs</th>
        <th>PCI Devices</th>
        <th>USB Devices</th>
      </tr>
    </thead>
    <tbody>
<?php foreach ($vms as $vm): ?>
<?php
  $res = $lv->get_domain_by_name($vm);
  $uuid = $lv->domain_get_uuid($res);
  $config = domain_to_config($uuid);
  $icon = getIcon($res, $uuid);
  $state = $lv->domain_state_translate($lv->domain_get_info($res)['state']);
  [$gpus, $pcis] = extractPciGroupedDevices($config, $gpuList);
  $usbs = extractGroupedDevices($config, 'usb');

  switch ($state) {
    case 'running':
      $state_icon = '<i class="fa fa-play green-text"></i>';
      break;
    case 'paused':
      $state_icon = '<i class="fa fa-square orange-text"></i>';
      break;
    default:
      $state_icon = '<i class="fa fa-square red-text"></i>';
  }
?>
      <tr>
        <td style="text-align: center; padding: 0.5em; white-space: nowrap;"><?= $state_icon ?></td>
        <td style="text-align: center; padding: 0.5em;"><img src="<?= $icon ?>" class="img" style="height: 32px;"></td>
        <td style="padding: 0.5em; white-space: nowrap;"><?= htmlspecialchars($vm) ?></td>
        <td style="padding: 0.5em;"><?= $gpus ?></td>
        <td style="padding: 0.5em;"><?= $pcis ?></td>
        <td style="padding: 0.5em;"><?= $usbs ?></td>
      </tr>
<?php endforeach; ?>
    </tbody>
  </table>
</div>

<form markdown="1" id="form" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" id="file" name="#file" value="/boot/config/plugins/vm-cycle/vmcyclesettings" />
<input type="hidden" id="command" name="#command" value="" />

<div class="title"><span class="left"><i class="fa fa-hand-peace-o title"></i>Cycle VM vs VM</span></div>

VM 1:
: <select name="VM1" class="narrow">
    <?php foreach ($vms as $vm): ?>
        <option value="<?= $vm ?>" <?= $vm == $vmcyclevmsetup_vm1 ? 'selected' : '' ?>><?= $vm ?></option>
    <?php endforeach; ?>
  </select>
    <blockquote class='inline_help'>
        <p>set your first VM Name here to cycle, sequence doesn't matter</p>
    </blockquote>

VM 2:
: <select name="VM2" class="narrow">
    <?php foreach ($vms as $vm): ?>
        <option value="<?= $vm ?>" <?= $vm == $vmcyclevmsetup_vm2 ? 'selected' : '' ?>><?= $vm ?></option>
    <?php endforeach; ?>
  </select>
    <blockquote class='inline_help'>
        <p>set your second VM Name here to cycle, sequence doesn't matter</p>
    </blockquote>

<div style="text-align: center;">
    <input type="button" value="Apply" onClick="send('apply')">
    <input type="button" value="Cycle VMs" onClick="send('start')">
</div>

<div class="title"><span class="left"><i class="fa fa-hand-peace-o title"></i>Cycle VM vs Docker/s</span></div>

VM:
: <input type="text" name="VMD" class="narrow" maxlength="50" value="<?= $vmcyclevmsetup_vmdocker ?>" placeholder="VM Name" >
    <blockquote class='inline_help'>
        <p>set your VM Name here to cycle</p>
        <p>if the VM is running, we stop the VM, start the Dockers, if VM is off, vice versa</p>
    </blockquote>

DOCKER:
: <input type="text" name="DOCKERS" class="narrow" maxlength="50" value="<?= $vmcyclevmsetup_docker ?>" placeholder="DOCKER Name/s" >
    <blockquote class='inline_help'>
        <p>set your Docker Name/s here to cycle, space separated, sequence doesn't matter</p>
    </blockquote>

<div style="text-align: center;">
    <input type="button" value="Apply" onClick="send('apply')">
    <input type="button" value="Cycle VM Docker" onClick="send('startdocker')">
</div>

</form>

<script>
    function send(command) {
        if(command == "start"){
            document.getElementById("command").value = "/usr/local/emhttp/plugins/vm-cycle/scripts/start";
        } else if( command == "startdocker" ){
            document.getElementById("command").value = "/usr/local/emhttp/plugins/vm-cycle/scripts/startdocker";
        } else if( command == "apply" ) {
            document.getElementById("command").value = "/usr/local/emhttp/plugins/vm-cycle/scripts/apply";
        }
        document.getElementById("form").submit();
    }
</script>